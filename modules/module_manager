#! /usr/bin/env python

import curses
import os, datetime, getpass

stdscr = curses.initscr()

curses.noecho()
curses.cbreak()
stdscr.keypad(1)

main   = 0
add    = 1
remove = 2
addRep = 3
addEnv = 4
remRep = 5
remEnv = 6
state  = main


makefileHead = """all: directories lib/modules.so

profile: directories lib/modules_profile.so

directories:
	mkdir -p build; mkdir -p lib
"""

makefile1 = """

lib/modules.so: build/module_handler.o """

makefile2 = """build/BaseOrganism.o build/BaseEnvironment.o
	g++ -O3 -shared $^ -o $@

build/module_handler.o: ./src/module_handler.cpp ./include/module_handler.h """

makefile3 = """../include/config.h
	g++ -O3 -std=c++0x -I./include/ -I../include/ """

makefile4 = """-fpic -c $< -o $@

"""

makefile5 = """build/BaseOrganism.o: ./src/BaseOrganism.cpp ./include/BaseOrganism.h ../include/config.h
	g++ -O3 -std=c++0x  -I./include/ -I../include/ -fpic -c $< -o $@

build/BaseEnvironment.o: ./src/BaseEnvironment.cpp ./include/BaseEnvironment.h ../include/config.h
	g++ -O3 -std=c++0x -I./include/ -I../include/ -fpic -c $< -o $@

"""

makefileTail = """
clean:
	rm -f *.o *.so *~ \#* ./build/*.o ./lib/*.so
"""

makefileLine = """
	g++ -O3 -std=c++0x -I./include/ -I../include/ -fpic -c $< -o $@

"""

moduleHandler1 = """using namespace std;
#include <iostream>
#include "module_handler.h"

// Organism modules
"""

moduleHandler2 = """
// Environment modules
"""

moduleHandler3 = """
BaseOrganism* newOrganism(config &args, globalVars &global)
{
  BaseOrganism *m;

  if (args.organismModuleName=="BaseOrganism")
    m = new BaseOrganism(args, global);
"""

moduleHandler4 = """  else                         
    m = new BaseOrganism(args, global);

  return m;
}

void deleteOrganism(config &args, BaseOrganism* organismObject)
{
  if (args.organismModuleName=="BaseOrganism")
    delete organismObject;
"""

moduleHandler5 = """  else
    delete organismObject;
}

BaseEnvironment* newEnvironment(config &args)
{
  BaseEnvironment *e;

  if (args.environmentModuleName=="BaseEnvironment")
    e = new BaseEnvironment(args);
"""

moduleHandler6 = """  else
    e = new BaseEnvironment(args);

  return e;
}

void deleteEnvironment(config &args, BaseEnvironment* environmentObject)
{
  if (args.environmentModuleName=="BaseEnvironment")
    delete environmentObject;
"""

moduleHandler7 = """  else
    delete environmentObject;
}
"""



stateText = ["What to do?\n\n[1] - add a module\n[2] - remove a module\n[3] - generate files\n[4] - exit\n\n", "Add a module\n\n[1] - organism module\n[2] - environment module\n[3] - back\n[4] - exit\n\n", "Remove a module\n\n[1] - organism module\n[2] - environment module\n[3] - back\n[4] - exit\n\n", "Add a reproduction module\n\nEnter module name: ", "Add an environment module\n\nEnter module name: ", "Remove a reproduction module\n\n", "Remove an environment module\n\n"]

developmentModules = []
with open('./organism_modules/organism_module_list', 'r') as developmentFile:
    developmentModules = [line.rstrip('\n') for line in developmentFile.readlines()]
environmentModules = []
with open('./environment_modules/environment_module_list', 'r') as environmentFile:
    environmentModules = [line.rstrip('\n') for line in environmentFile.readlines()]

def recompile():

    returnString = ""

    # Rewrite makefile
    makefileString = makefile1
    for module in developmentModules:
        makefileString += "build/" + module + ".o "
    for module in environmentModules:
        makefileString += "build/" + module + ".o "
    makefileString += makefile2
    for module in developmentModules:
        makefileString += "./organism_modules/" + module + "/" + module + ".h "
    for module in environmentModules:
        makefileString += "./environment_modules/" + module + "/" + module + ".h "
    makefileString += makefile3
    for module in developmentModules:
        makefileString += "-I./organism_modules/" + module + " "
    for module in environmentModules:
        makefileString += "-I./environment_modules/" + module + " "
    makefileString += makefile4
    for module in developmentModules:
        makefileString += "build/" + module + ".o: ./organism_modules/" + module + "/" + module + ".cpp ./organism_modules/" + module + "/" + module + ".h ./include/BaseOrganism.h"
        makefileString += makefileLine
    for module in environmentModules:
        makefileString += "build/" + module + ".o: ./environment_modules/" + module + "/" + module + ".cpp ./environment_modules/" + module + "/" + module + ".h ./include/BaseEnvironment.h"
        makefileString += makefileLine
    makefileString += makefile5

    makefileString = makefileHead + makefileString + makefileString.replace('.o', '_profile.o').replace('.so', '_profile.so').replace('-O3', '-pg') + makefileTail

    with open('Makefile', 'w') as makefileFile:
        makefileFile.write(makefileString)
    returnString += "Generated Makefile.\n"

    # Rewrite moduleHandler
    moduleHandlerString = moduleHandler1
    for module in developmentModules:
        moduleHandlerString += "#include \"" + module + ".h\"\n"
    moduleHandlerString += moduleHandler2
    for module in environmentModules:
        moduleHandlerString += "#include \"" + module + ".h\"\n"
    moduleHandlerString += moduleHandler3
    for module in developmentModules:
        moduleHandlerString += "  else if (args.organismModuleName==\"" + module + "\")\n    m = new " + module + "(args, global);\n"
    moduleHandlerString += moduleHandler4
    for module in developmentModules:
        moduleHandlerString += "  else if (args.organismModuleName==\"" + module + "\")\n    delete ((" + module + "*)organismObject);\n"
    moduleHandlerString += moduleHandler5
    for module in environmentModules:
        moduleHandlerString += "  else if (args.environmentModuleName==\"" + module + "\")\n    e = new " + module + "(args);\n"
    moduleHandlerString += moduleHandler6
    for module in environmentModules:
        moduleHandlerString += "  else if (args.environmentModuleName==\"" + module + "\")\n    delete ((" + module + "*)environmentObject);\n"
    moduleHandlerString += moduleHandler7

    with open('src/module_handler.cpp', 'w') as moduleHandlerFile:
        moduleHandlerFile.write(moduleHandlerString)
    returnString += "Generated module_handler.cpp\n"

    # Rewrite development mechanism list file
    with open('organism_modules/organism_module_list', 'w') as developmentFile:
        first = True
        for module in developmentModules:
            if first:
                first = False
            else:
                developmentFile.write("\n")
            developmentFile.write(module)
    with open('environment_modules/environment_module_list', 'w') as envModuleFile:
        first = True
        for module in environmentModules:
            if first:
                first = False
            else:
                envModuleFile.write("\n")
            envModuleFile.write(module)

    # If the directory doesn't exist, create it.
    # If the .h and .cpp files don't exist, create them
    for module in developmentModules:
        if not os.path.exists("organism_modules/" + module):
            os.makedirs("organism_modules/" + module)
        if not os.path.isfile("organism_modules/" + module + "/" + module + ".h"):
            with open("organism_modules/" + module + "/" + module + ".h", 'w') as hFile:

                hFile.write("#include \"BaseOrganism.h\"\n\nclass ")
                hFile.write(module + " : public BaseOrganism\n{\n public:\n  ")
                hFile.write(module + "(config&, globalVars&);\n  ~" + module + "();\n")
                hString = """
  // Optional
  //void mutateGenome(config&, vector<unsigned short>&);

 private:
  void printDevelopmentProcess(ofstream&);
  void initializeOrphanDevelopmentProcess(config&);
  void initializeDevelopmentProcess(config&);
  void updateDevelopment(config&);

  /* Mechanism-specific variables. Suggestions:
     - Data structures for the developmental process.
     - Somewhere to store a working copy of the decoded genome.
     - Variable for initial size of orphan developmentProcesss.
     - Variable for maximum size of decoded genome.
   */

  // Optional
  //void initializeOrphanGenome(config&);
  //void printGenome(ofstream&);
};
"""
                hFile.write(hString)
            
                returnString += "Generated " + module + ".h\n"

            with open("organism_modules/" + module + "/" + module + ".cpp", 'w') as cppFile:
                cppFile.write("using namespace std;\n#include <iostream>\n#include \"" + module + ".h\"\n\n")
                now = datetime.datetime.now()
                cppFile.write("/*\n\n  " + module + " development mechanism.\n  Created on " + str(now.day) + "/" + str(now.month) + "/" + str(now.year) + " by " +  getpass.getuser() + "\n\n */\n\n// Print the details of the particular developmentProcess being used by this organism.\n")
                cppFile.write("void " + module + "::printDevelopmentProcess(ofstream &stream)\n{\n}\n\n// Create a new developmentProcess for an orphan organism.\n")
                cppFile.write("void " + module + "::initializeOrphanDevelopmentProcess(config &args)\n{\n}\n\n// Called at the start of each reproduction cycle. Do any per-cycle\n// initialization.\n")
                cppFile.write("void " + module + "::initializeDevelopmentProcess(config &args)\n{\n}\n\n// Called iteratively. When development is complete, set the developmentProcess and the\n// body specification of the next generation and set state to REPRODUCED.\n")
                cppFile.write("void " + module + "::updateDevelopment(config &args)\n{\n\n  //state = REPRODUCED;\n}\n\n// Initialize any mechanism-specific variables. Set variables from\n// command line/config file.\n")
                cppFile.write(module + "::" + module + "(config &args) : BaseOrganism(args)\n{\n  // Setting variables from command line/config file\n  //if ( args.organismArgs.count(\"example\") )\n  //  example = args.organismArgs[\"example\"];\n}\n\n")
                cppFile.write(module + "::~" + module + "()\n{\n}\n")
                returnString += "Generated " + module + ".cpp\n"

    for module in environmentModules:
        if not os.path.exists("environment_modules/" + module):
            os.makedirs("environment_modules/" + module)
        if not os.path.isfile("environment_modules/" + module + "/" + module + ".h"):
            with open("environment_modules/" + module + "/" + module + ".h", 'w') as hFile:
                hFile.write("#include \"BaseEnvironment.h\"\n\nclass ")
                hFile.write(module + " : public BaseEnvironment\n{\npublic:\n\n")
                hFile.write("  void interpretBody(config&,globalVars&,int,int);\n  void updateMetabolisms(config&,globalVars&);\n\n\n  " + module + "(config&);\n  ~" + module + "();\n\nprivate:\n\n};\n")
                returnString += "Generated " + module + ".h\n"
            with open("environment_modules/" + module + "/" + module + ".cpp", 'w') as cppFile:
                cppFile.write("using namespace std;\n#include <iostream>\n\n")
                cppFile.write("#include \"" + module + ".h\"\n\n// Given the coordinates of a new entity, create whatever we need to in order to evaluate its metabolism immediately and/or in the future\n")
                cppFile.write("void " + module + "::interpretBody(config &args, globalVars &global, int x, int y)\n{\n}\n\n")
                cppFile.write("void " + module + "::updateMetabolisms(config &args, globalVars &global)\n{\n}\n\n")
                cppFile.write(module + "::" + module + "(config &args, globalVars &global) : BaseEnvironment(args, global)\n{\n}\n\n" + module + "::~" + module + "()\n{\n}\n")
                returnString += "Generated " + module + ".cpp\n"


    return returnString + "\n"

while 1:
    stdscr.addstr(stateText[state])
    stdscr.refresh()

    postClearString = ""

    if state == main:
        c = stdscr.getch()
        if c == ord("1"):
            state = add
        elif c == ord("2"):
            state = remove
        elif c == ord("3"):
            # todo recompile
            postClearString += recompile()
        elif c == ord("4"):
            break
    elif state == add:
        c = stdscr.getch()
        if c == ord("1"):
            state = addRep
        elif c == ord("2"):
            state = addEnv
        elif c == ord("3"):
            state = main
        elif c == ord("4"):
            break
    elif state == remove:
        c = stdscr.getch()
        if c == ord("1"):
            state = remRep
        elif c == ord("2"):
            state = remEnv
        elif c == ord("3"):
            state = main
        elif c == ord("4"):
            break
    elif state == addRep:
        curses.echo()
        newRep = stdscr.getstr()
        stdscr.addstr("Add reproduction module \"" + newRep + "\"? yes/[no]: ")
        ans = stdscr.getstr()
        curses.noecho()
        if ans == "yes":
            if newRep in developmentModules:
                postClearString = "Reproduction module called '" + newRep + "' already exists.\n\n"
            else:
                developmentModules.append(newRep)
                postClearString = "Added reproduction module '" + newRep + "'.\n"
                postClearString += recompile()
        state = main
    elif state == addEnv:
        curses.echo()
        newEnv = stdscr.getstr()
        stdscr.addstr("Add environment module \"" + newEnv + "\"? yes/[no]: ")
        ans = stdscr.getstr()
        curses.noecho()
        if ans == "yes":
            if newEnv in environmentModules:
                postClearString = "Environment module called '" + newEnv + "' already exists.\n\n"
            else:
                environmentModules.append(newEnv)
                postClearString = "Added environment module '" + newEnv + "'.\n"
                postClearString += recompile()
        state = main
    elif state == remRep:
        state = main
    elif state == remEnv:
        state = main

    stdscr.clear()

    stdscr.addstr(postClearString)

curses.nocbreak(); stdscr.keypad(0); curses.echo()
curses.endwin()
